diff --git a/PXE/Tests.module b/PXE/Tests.module
index 5c2a88a..e69de29 100644
--- a/PXE/Tests.module
+++ b/PXE/Tests.module
@@ -1 +0,0 @@
-/threads
diff --git a/postbuild/paths.cmd b/postbuild/paths.cmd
index 2e54d6e..cec924b 100644
--- a/postbuild/paths.cmd
+++ b/postbuild/paths.cmd
@@ -12,7 +12,6 @@ set PATH_TO_VM_DISK=__EMPTY__
 set PATH_TO_VM_TOOLS=__EMPTY__
 set VOL_MOUNT_LETTER=__EMPTY__
 
-if _%COMPUTERNAME%_==_DESKTOP-NITRO5_ goto config_DESKTOP-NITRO5
 if _%COMPUTERNAME%_==_AGURZOU-DEV-PC_ goto config_AGURZOU-DEV
 if _%COMPUTERNAME%_==_ALEX-PC_ goto config_ALEX-PC
 if _%COMPUTERNAME%_==_AGURZOU-LPT_ goto config_AGURZOU-LPT
@@ -70,14 +69,4 @@ set BOCHS_PATH="c:\Program Files (x86)\Bochs-2.6.8\"
 
 goto end
 
-:config_DESKTOP-NITRO5
-
-SET VOL_MOUNT_LETTER="Q:"
-SET PATH_TO_VM_FILE="D:\OneDrive - Technical University of Cluj-Napoca\UTCN\An IV\S1\_Cod_Proiecte_Teme\PSO\HAL9000\VM\HAL9000_VM\HAL9000.vmx"
-SET PATH_TO_LOG_FILE="D:\OneDrive - Technical University of Cluj-Napoca\UTCN\An IV\S1\_Cod_Proiecte_Teme\PSO\HAL9000\VM\HAL9000_VM\HAL9000.log"
-SET PXE_PATH="D:\OneDrive - Technical University of Cluj-Napoca\UTCN\An IV\S1\_Cod_Proiecte_Teme\PSO\HAL9000\PXE"
-SET PATH_TO_VIX_TOOLS="F:\Programe\VMWare"
-SET PATH_TO_VM_DISK="D:\OneDrive - Technical University of Cluj-Napoca\UTCN\An IV\S1\_Cod_Proiecte_Teme\PSO\HAL9000\VM\HAL9000_VM\HAL9000.vmdk"
-goto end
-
 :end
\ No newline at end of file
diff --git a/src/HAL9000/headers/cmd_thread_helper.h b/src/HAL9000/headers/cmd_thread_helper.h
index f58af9b..c2c9f13 100644
--- a/src/HAL9000/headers/cmd_thread_helper.h
+++ b/src/HAL9000/headers/cmd_thread_helper.h
@@ -4,7 +4,6 @@
 
 FUNC_GenericCommand CmdListCpus;
 FUNC_GenericCommand CmdListThreads;
-FUNC_GenericCommand CmdListReadyThreads;
 FUNC_GenericCommand CmdYield;
 FUNC_GenericCommand CmdRunTest;
 FUNC_GenericCommand CmdSendIpi;
diff --git a/src/HAL9000/headers/cpumu.h b/src/HAL9000/headers/cpumu.h
index f15632d..e1f610c 100644
--- a/src/HAL9000/headers/cpumu.h
+++ b/src/HAL9000/headers/cpumu.h
@@ -17,6 +17,8 @@ typedef struct _THREADING_DATA
     struct _THREAD*     CurrentThread;
     struct _THREAD*     PreviousThread;
 
+    BOOLEAN             YieldOnInterruptReturn;
+
     QWORD               IdleTicks;
     QWORD               KernelTicks;
 } THREADING_DATA, *PTHREADING_DATA;
diff --git a/src/HAL9000/headers/thread_internal.h b/src/HAL9000/headers/thread_internal.h
index 07f5f8e..be2588a 100644
--- a/src/HAL9000/headers/thread_internal.h
+++ b/src/HAL9000/headers/thread_internal.h
@@ -89,19 +89,9 @@ typedef struct _THREAD
     // MUST be non-NULL for all threads which belong to user-mode processes
     PVOID                   UserStack;
 
-    TID                     ParentTID;
-
     struct _PROCESS*        Process;
 } THREAD, *PTHREAD;
 
-STATUS GetNumberOfThreads(
-    OUT     DWORD* threadCount
-);
-
-STATUS GetNumberOfReadyThreads(
-	OUT     DWORD* threadCount
-);
-
 //******************************************************************************
 // Function:     ThreadSystemPreinit
 // Description:  Basic global initialization. Initializes the all threads list,
@@ -262,20 +252,6 @@ ThreadExecuteForEachThreadEntry(
     IN_OPT  PVOID               Context
     );
 
-//******************************************************************************
-// Function:     ThreadExecuteForEachReadyThreadEntry
-// Description:  Iterates over the ready threads list and invokes Function on 
-//               each entry passing an additional optional Context parameter.
-// Returns:      STATUS
-// Parameter:    IN PFUNC_ListFunction Function
-// Parameter:    IN_OPT PVOID Context
-//******************************************************************************
-STATUS
-ThreadExecuteForEachReadyThreadEntry(
-	IN      PFUNC_ListFunction  Function,
-	IN_OPT  PVOID               Context
-);
-
 
 //******************************************************************************O
 // Function:     GetCurrentThread
diff --git a/src/HAL9000/src/cmd_interpreter.c b/src/HAL9000/src/cmd_interpreter.c
index 2b649fa..d0b254f 100644
--- a/src/HAL9000/src/cmd_interpreter.c
+++ b/src/HAL9000/src/cmd_interpreter.c
@@ -68,7 +68,6 @@ static const COMMAND_DEFINITION COMMANDS[] =
                 "\n\t$TIMES - number of times to wait for timer, valid only if periodic", CmdTestTimer, 1, 3},
 
     { "threads", "Displays all threads", CmdListThreads, 0, 0},
-    { "readythreads", "Displays all ready threads", CmdListReadyThreads, 0, 0},
     { "run", "$TEST [$NO_OF_THREADS]\n\tRuns the $TEST specified"
              "\n\t$NO_OF_THREADS the number of threads for running the test,"
              "if the number is not specified then it will run on 2 * NumberOfProcessors",
diff --git a/src/HAL9000/src/cmd_thread_helper.c b/src/HAL9000/src/cmd_thread_helper.c
index a3e3cab..f794c95 100644
--- a/src/HAL9000/src/cmd_thread_helper.c
+++ b/src/HAL9000/src/cmd_thread_helper.c
@@ -72,7 +72,6 @@ _CmdReadAndDumpCpuid(
     );
 
 static FUNC_ListFunction _CmdThreadPrint;
-static FUNC_ListFunction _CmdReadyThreadPrint;
 
 void
 (__cdecl CmdListCpus)(
@@ -130,12 +129,7 @@ void
 
     ASSERT(NumberOfParameters == 0);
 
-    DWORD threadCount;
-    GetNumberOfThreads(&threadCount);
-
-    LOG("Thread count: %d\n", threadCount);
     LOG("%7s", "TID|");
-    LOG("%9s", "PTID|");
     LOG("%20s", "Name|");
     LOG("%5s", "Prio|");
     LOG("%8s", "State|");
@@ -149,34 +143,6 @@ void
     ASSERT( SUCCEEDED(status));
 }
 
-void
-(__cdecl CmdListReadyThreads)(
-	IN          QWORD       NumberOfParameters
-	)
-{
-	STATUS status;
-
-	ASSERT(NumberOfParameters == 0);
-
-	DWORD threadCount;
-	GetNumberOfReadyThreads(&threadCount);
-
-	LOG("Ready thread count: %d\n", threadCount);
-	LOG("%7s", "TID|");
-	LOG("%9s", "PTID|");
-	LOG("%20s", "Name|");
-	LOG("%5s", "Prio|");
-	LOG("%8s", "State|");
-	LOG("%10s", "Cmp ticks|");
-	LOG("%10s", "Prt ticks|");
-	LOG("%10s", "Ttl ticks|");
-	LOG("%10s", "Process|");
-	LOG("\n");
-
-	status = ThreadExecuteForEachReadyThreadEntry(_CmdReadyThreadPrint, NULL);
-	ASSERT(SUCCEEDED(status));
-}
-
 void
 (__cdecl CmdYield)(
     IN          QWORD       NumberOfParameters
@@ -720,7 +686,6 @@ STATUS
     pThread = CONTAINING_RECORD(ListEntry, THREAD, AllList );
 
     LOG("%6x%c", pThread->Id, '|');
-    LOG("%8x%c", pThread->ParentTID, '|');
     LOG("%19s%c", pThread->Name, '|');
     LOG("%4U%c", pThread->Priority, '|');
     LOG("%7s%c", _CmdThreadStateToName(pThread->State), '|');
@@ -733,35 +698,6 @@ STATUS
     return STATUS_SUCCESS;
 }
 
-static
-STATUS
-(__cdecl _CmdReadyThreadPrint) (
-	IN      PLIST_ENTRY     ListEntry,
-	IN_OPT  PVOID           FunctionContext
-	)
-{
-	PTHREAD pThread;
-
-	ASSERT(NULL != ListEntry);
-	ASSERT(NULL == FunctionContext);
-
-    
-	pThread = CONTAINING_RECORD(ListEntry, THREAD, ReadyList);
-
-	LOG("%6x%c", pThread->Id, '|');
-	LOG("%8x%c", pThread->ParentTID, '|');
-	LOG("%19s%c", pThread->Name, '|');
-	LOG("%4U%c", pThread->Priority, '|');
-	LOG("%7s%c", _CmdThreadStateToName(pThread->State), '|');
-	LOG("%9U%c", pThread->TickCountCompleted, '|');
-	LOG("%9U%c", pThread->TickCountEarly, '|');
-	LOG("%9U%c", pThread->TickCountCompleted + pThread->TickCountEarly, '|');
-	LOG("%9x%c", pThread->Process->Id, '|');
-	LOG("\n");
-
-	return STATUS_SUCCESS;
-}
-
 static
 void
 _CmdReadAndDumpCpuid(
diff --git a/src/HAL9000/src/iomu.c b/src/HAL9000/src/iomu.c
index ae9c84a..a704910 100644
--- a/src/HAL9000/src/iomu.c
+++ b/src/HAL9000/src/iomu.c
@@ -28,7 +28,7 @@
 #define PIC_MASTER_OFFSET                   0x20
 #define PIC_SLAVE_OFFSET                    0x28
 
-#define SCHEDULER_TIMER_INTERRUPT_TIME_US   (10*MS_IN_US)
+#define SCHEDULER_TIMER_INTERRUPT_TIME_US   (40*MS_IN_US)
 
 #define HAL9000_SYSTEM_FILE_NAME            "HAL9000.ini"
 
diff --git a/src/HAL9000/src/thread.c b/src/HAL9000/src/thread.c
index 18ce83c..b311f0c 100644
--- a/src/HAL9000/src/thread.c
+++ b/src/HAL9000/src/thread.c
@@ -10,9 +10,9 @@
 #include "gdtmu.h"
 #include "pe_exports.h"
 
-#define TID_INCREMENT               0x10
+#define TID_INCREMENT               4
 
-#define THREAD_TIME_SLICE           4
+#define THREAD_TIME_SLICE           1
 
 extern void ThreadStart();
 
@@ -36,16 +36,6 @@ typedef struct _THREAD_SYSTEM_DATA
 
     _Guarded_by_(ReadyThreadsLock)
     LIST_ENTRY          ReadyThreadsList;
-
-    LOCK                AllThreadsCountLock;
-
-	_Guarded_by_(AllThreadsCountLock)
-    DWORD               AllThreadsCount;
-
-	LOCK                ReadyThreadsCountLock;
-
-	_Guarded_by_(ReadyThreadsCountLock)
-	DWORD               ReadyThreadsCount;
 } THREAD_SYSTEM_DATA, *PTHREAD_SYSTEM_DATA;
 
 static THREAD_SYSTEM_DATA m_threadSystemData;
@@ -155,12 +145,6 @@ ThreadSystemPreinit(
 
     InitializeListHead(&m_threadSystemData.ReadyThreadsList);
     LockInit(&m_threadSystemData.ReadyThreadsLock);
-
-    m_threadSystemData.AllThreadsCount = 0;
-    LockInit(&m_threadSystemData.AllThreadsCountLock);
-
-    m_threadSystemData.ReadyThreadsCount = 0;
-    LockInit(&m_threadSystemData.ReadyThreadsCountLock);
 }
 
 STATUS
@@ -276,22 +260,6 @@ ThreadSystemInitIdleForCurrentCPU(
     return status;
 }
 
-STATUS GetNumberOfThreads(
-	OUT     DWORD* threadCount
-)
-{
-	*threadCount = m_threadSystemData.AllThreadsCount;
-	return STATUS_SUCCESS;
-}
-
-STATUS GetNumberOfReadyThreads(
-	OUT     DWORD* threadCount
-)
-{
-	*threadCount = m_threadSystemData.ReadyThreadsCount;
-	return STATUS_SUCCESS;
-}
-
 STATUS
 ThreadCreate(
     IN_Z        char*               Name,
@@ -475,7 +443,7 @@ ThreadTick(
     if (++pCpu->ThreadData.RunningThreadTicks >= THREAD_TIME_SLICE)
     {
         LOG_TRACE_THREAD("Will yield on return\n");
-        //pCpu->ThreadData.YieldOnInterruptReturn = TRUE;
+        pCpu->ThreadData.YieldOnInterruptReturn = TRUE;
     }
 }
 
@@ -498,8 +466,8 @@ ThreadYield(
 
     ASSERT( NULL != pCpu );
 
-    bForcedYield = TRUE;
-    //pCpu->ThreadData.YieldOnInterruptReturn = FALSE;
+    bForcedYield = pCpu->ThreadData.YieldOnInterruptReturn;
+    pCpu->ThreadData.YieldOnInterruptReturn = FALSE;
 
     if (THREAD_FLAG_FORCE_TERMINATE_PENDING == _InterlockedAnd(&pThread->Flags, MAX_DWORD))
     {
@@ -511,9 +479,6 @@ ThreadYield(
     if (pThread != pCpu->ThreadData.IdleThread)
     {
         InsertTailList(&m_threadSystemData.ReadyThreadsList, &pThread->ReadyList);
-		LockAcquire(&m_threadSystemData.ReadyThreadsCountLock, &dummyState);
-		m_threadSystemData.ReadyThreadsCount++;
-		LockRelease(&m_threadSystemData.ReadyThreadsCountLock, dummyState);
     }
     if (!bForcedYield)
     {
@@ -572,10 +537,6 @@ ThreadUnblock(
     Thread->State = ThreadStateReady;
     LockRelease(&m_threadSystemData.ReadyThreadsLock, dummyState );
     LockRelease(&Thread->BlockLock, oldState);
-
-	LockAcquire(&m_threadSystemData.ReadyThreadsCountLock, &dummyState);
-	m_threadSystemData.ReadyThreadsCount++;
-	LockRelease(&m_threadSystemData.ReadyThreadsCountLock, dummyState);
 }
 
 void
@@ -613,8 +574,7 @@ ThreadYieldOnInterrupt(
     void
     )
 {
-    //return GetCurrentPcpu()->ThreadData.YieldOnInterruptReturn;
-    return FALSE;
+    return GetCurrentPcpu()->ThreadData.YieldOnInterruptReturn;
 }
 
 void
@@ -730,33 +690,6 @@ ThreadExecuteForEachThreadEntry(
     return status;
 }
 
-STATUS
-ThreadExecuteForEachReadyThreadEntry(
-	IN      PFUNC_ListFunction  Function,
-	IN_OPT  PVOID               Context
-)
-{
-	STATUS status;
-	INTR_STATE oldState;
-
-	if (NULL == Function)
-	{
-		return STATUS_INVALID_PARAMETER1;
-	}
-
-	status = STATUS_SUCCESS;
-
-	LockAcquire(&m_threadSystemData.ReadyThreadsLock, &oldState);
-	status = ForEachElementExecute(&m_threadSystemData.ReadyThreadsList,
-		Function,
-		Context,
-		FALSE
-	);
-	LockRelease(&m_threadSystemData.ReadyThreadsLock, oldState);
-
-	return status;
-}
-
 void
 SetCurrentThread(
     IN      PTHREAD     Thread
@@ -861,31 +794,11 @@ _ThreadInit(
         pThread->State = ThreadStateBlocked;
         pThread->Priority = Priority;
 
-        if (pThread->Id != 0) {
-			PTHREAD parentThread = GetCurrentThread();
-            if (parentThread != NULL) {
-                pThread->ParentTID = parentThread->Id;
-            }
-            else {
-                pThread->ParentTID = 1;
-            }
-        }
-        else {
-            pThread->ParentTID = 0xffffffff;
-        }
-
-
         LockInit(&pThread->BlockLock);
 
         LockAcquire(&m_threadSystemData.AllThreadsLock, &oldIntrState);
         InsertTailList(&m_threadSystemData.AllThreadsList, &pThread->AllList);
         LockRelease(&m_threadSystemData.AllThreadsLock, oldIntrState);
-
-		LockAcquire(&m_threadSystemData.AllThreadsCountLock, &oldIntrState);
-        m_threadSystemData.AllThreadsCount++;
-		LockRelease(&m_threadSystemData.AllThreadsCountLock, oldIntrState);
-    
-        LOG("Thread with name %s and TID 0x%x has been created\n", pThread->Name, pThread->Id);
     }
     __finally
     {
@@ -1193,11 +1106,10 @@ PTHREAD
 _ThreadGetReadyThread(
     void
     )
-{  
+{
     PTHREAD pNextThread;
     PLIST_ENTRY pEntry;
     BOOLEAN bIdleScheduled;
-    INTR_STATE dummyState;
 
     ASSERT( INTR_OFF == CpuIntrGetState());
     ASSERT( LockIsOwner(&m_threadSystemData.ReadyThreadsLock));
@@ -1213,9 +1125,7 @@ _ThreadGetReadyThread(
     else
     {
         pNextThread = CONTAINING_RECORD( pEntry, THREAD, ReadyList );
-		LockAcquire(&m_threadSystemData.ReadyThreadsCountLock, &dummyState);
-		m_threadSystemData.ReadyThreadsCount--;
-		LockRelease(&m_threadSystemData.ReadyThreadsCountLock, dummyState);
+
         ASSERT( pNextThread->State == ThreadStateReady );
         bIdleScheduled = FALSE;
     }
@@ -1281,12 +1191,6 @@ _ThreadDestroy(
     RemoveEntryList(&pThread->AllList);
     LockRelease(&m_threadSystemData.AllThreadsLock, oldState);
 
-	LockAcquire(&m_threadSystemData.AllThreadsCountLock, &oldState);
-    m_threadSystemData.AllThreadsCount--;
-	LockRelease(&m_threadSystemData.AllThreadsCountLock, oldState);
-
-    LOG("Thread with name %s and TID 0x%x has been destroyed\n", pThread->Name, pThread->Id);
-
     // This must be done before removing the thread from the process list, else
     // this may be the last thread and the process VAS will be freed by the time
     // ProcessRemoveThreadFromList - this function also dereferences the process
